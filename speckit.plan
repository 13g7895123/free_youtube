# YouTube Playlist Manager - Technical Implementation Plan
# Project: Free YouTube Player with Playlist Management
# Framework: CodeIgniter 4 (CI4)
# Database: MariaDB
# Generated: 2025-10-27

## Project Overview
A YouTube video player application with database-backed playlist management, built on CodeIgniter 4 framework with MariaDB database for persistent storage.

## Technology Stack

### Backend
- **Framework**: CodeIgniter 4 (latest stable)
- **PHP Version**: 8.1+
- **Database**: MariaDB 10.6+
- **ORM**: CodeIgniter 4 Model (Query Builder)

### Frontend
- **Framework**: Vue.js 3.x (Composition API)
- **Build Tool**: Vite
- **API Integration**: YouTube IFrame Player API
- **Styling**: Modern CSS / Tailwind CSS

### Development Tools
- **Package Manager**: Composer (backend), npm (frontend)
- **Version Control**: Git
- **Container**: Docker + Docker Compose

## Database Schema

### Tables

#### 1. videos
```sql
CREATE TABLE videos (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    video_id VARCHAR(20) NOT NULL UNIQUE COMMENT 'YouTube video ID',
    title VARCHAR(255) NOT NULL,
    description TEXT,
    thumbnail_url VARCHAR(500),
    duration INT UNSIGNED COMMENT 'Duration in seconds',
    channel_name VARCHAR(255),
    channel_id VARCHAR(50),
    youtube_url VARCHAR(500) NOT NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_video_id (video_id),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
```

#### 2. playlists
```sql
CREATE TABLE playlists (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    is_active TINYINT(1) DEFAULT 1,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_name (name),
    INDEX idx_is_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
```

#### 3. playlist_items
```sql
CREATE TABLE playlist_items (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    playlist_id INT UNSIGNED NOT NULL,
    video_id INT UNSIGNED NOT NULL,
    position INT UNSIGNED NOT NULL COMMENT 'Order position in playlist',
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (playlist_id) REFERENCES playlists(id) ON DELETE CASCADE,
    FOREIGN KEY (video_id) REFERENCES videos(id) ON DELETE CASCADE,
    INDEX idx_playlist_id (playlist_id),
    INDEX idx_video_id (video_id),
    INDEX idx_position (position),
    UNIQUE KEY unique_playlist_video_position (playlist_id, position)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
```

## CodeIgniter 4 Structure

### Directory Structure
```
app/
├── Config/
│   ├── Database.php          # Database configuration
│   ├── Routes.php            # API routes
│   └── App.php               # App configuration
├── Controllers/
│   └── Api/
│       ├── VideoController.php      # Video CRUD operations
│       ├── PlaylistController.php   # Playlist CRUD operations
│       └── PlaylistItemController.php # Playlist items management
├── Models/
│   ├── VideoModel.php        # Video entity model
│   ├── PlaylistModel.php     # Playlist entity model
│   └── PlaylistItemModel.php # Playlist items model
├── Entities/
│   ├── Video.php             # Video entity
│   ├── Playlist.php          # Playlist entity
│   └── PlaylistItem.php      # PlaylistItem entity
├── Database/
│   ├── Migrations/
│   │   ├── 2025-10-27-000001_CreateVideosTable.php
│   │   ├── 2025-10-27-000002_CreatePlaylistsTable.php
│   │   └── 2025-10-27-000003_CreatePlaylistItemsTable.php
│   └── Seeds/
│       └── DemoDataSeeder.php
├── Filters/
│   └── CorsFilter.php        # CORS handling for API
└── Validation/
    ├── VideoRules.php        # Custom validation rules
    └── PlaylistRules.php
```

## API Endpoints

### Video Management

#### GET /api/videos
- **Description**: Get all videos with pagination
- **Query Params**: 
  - `page` (int, default: 1)
  - `limit` (int, default: 20)
  - `search` (string, optional)
- **Response**: 
```json
{
  "status": "success",
  "data": {
    "videos": [...],
    "pagination": {
      "current_page": 1,
      "total_pages": 5,
      "total_items": 100
    }
  }
}
```

#### GET /api/videos/{id}
- **Description**: Get single video by ID
- **Response**: Single video object

#### POST /api/videos
- **Description**: Create new video
- **Body**:
```json
{
  "video_id": "dQw4w9WgXcQ",
  "title": "Video Title",
  "description": "Description",
  "thumbnail_url": "https://...",
  "duration": 213,
  "channel_name": "Channel",
  "channel_id": "UCxxx",
  "youtube_url": "https://youtube.com/watch?v=..."
}
```

#### PUT /api/videos/{id}
- **Description**: Update video
- **Body**: Same as POST

#### DELETE /api/videos/{id}
- **Description**: Delete video

#### GET /api/videos/check/{video_id}
- **Description**: Check if YouTube video ID exists in database
- **Response**: 
```json
{
  "exists": true,
  "video": {...}
}
```

### Playlist Management

#### GET /api/playlists
- **Description**: Get all playlists
- **Query Params**:
  - `page` (int)
  - `limit` (int)
- **Response**: List of playlists with video count

#### GET /api/playlists/{id}
- **Description**: Get single playlist with all videos
- **Response**:
```json
{
  "status": "success",
  "data": {
    "id": 1,
    "name": "My Playlist",
    "description": "...",
    "video_count": 10,
    "videos": [...]
  }
}
```

#### POST /api/playlists
- **Description**: Create new playlist
- **Body**:
```json
{
  "name": "Playlist Name",
  "description": "Optional description"
}
```

#### PUT /api/playlists/{id}
- **Description**: Update playlist
- **Body**: Same as POST

#### DELETE /api/playlists/{id}
- **Description**: Delete playlist (cascade delete items)

### Playlist Items Management

#### GET /api/playlists/{playlist_id}/items
- **Description**: Get all items in a playlist (ordered by position)
- **Response**: Ordered list of videos in playlist

#### POST /api/playlists/{playlist_id}/items
- **Description**: Add video to playlist
- **Body**:
```json
{
  "video_id": 1,
  "position": 1
}
```

#### PUT /api/playlists/{playlist_id}/items/{id}/position
- **Description**: Update item position
- **Body**:
```json
{
  "position": 5
}
```

#### DELETE /api/playlists/{playlist_id}/items/{id}
- **Description**: Remove video from playlist

#### POST /api/playlists/{playlist_id}/items/reorder
- **Description**: Reorder all items in playlist
- **Body**:
```json
{
  "items": [
    {"id": 1, "position": 1},
    {"id": 2, "position": 2},
    {"id": 3, "position": 3}
  ]
}
```

## CodeIgniter 4 Models

### VideoModel.php
```php
<?php
namespace App\Models;

use CodeIgniter\Model;

class VideoModel extends Model
{
    protected $table = 'videos';
    protected $primaryKey = 'id';
    protected $useAutoIncrement = true;
    protected $returnType = 'App\Entities\Video';
    protected $useSoftDeletes = false;
    protected $allowedFields = [
        'video_id', 'title', 'description', 'thumbnail_url',
        'duration', 'channel_name', 'channel_id', 'youtube_url'
    ];
    protected $useTimestamps = true;
    protected $createdField = 'created_at';
    protected $updatedField = 'updated_at';
    protected $validationRules = [
        'video_id' => 'required|max_length[20]|is_unique[videos.video_id,id,{id}]',
        'title' => 'required|max_length[255]',
        'youtube_url' => 'required|max_length[500]|valid_url'
    ];
    protected $validationMessages = [];
    protected $skipValidation = false;
}
```

### PlaylistModel.php
```php
<?php
namespace App\Models;

use CodeIgniter\Model;

class PlaylistModel extends Model
{
    protected $table = 'playlists';
    protected $primaryKey = 'id';
    protected $useAutoIncrement = true;
    protected $returnType = 'App\Entities\Playlist';
    protected $useSoftDeletes = false;
    protected $allowedFields = ['name', 'description', 'is_active'];
    protected $useTimestamps = true;
    protected $createdField = 'created_at';
    protected $updatedField = 'updated_at';
    protected $validationRules = [
        'name' => 'required|max_length[255]'
    ];
    
    public function getWithVideos($id)
    {
        return $this->select('playlists.*, COUNT(playlist_items.id) as video_count')
                    ->join('playlist_items', 'playlists.id = playlist_items.playlist_id', 'left')
                    ->where('playlists.id', $id)
                    ->groupBy('playlists.id')
                    ->first();
    }
}
```

### PlaylistItemModel.php
```php
<?php
namespace App\Models;

use CodeIgniter\Model;

class PlaylistItemModel extends Model
{
    protected $table = 'playlist_items';
    protected $primaryKey = 'id';
    protected $useAutoIncrement = true;
    protected $returnType = 'App\Entities\PlaylistItem';
    protected $useSoftDeletes = false;
    protected $allowedFields = ['playlist_id', 'video_id', 'position'];
    protected $useTimestamps = true;
    protected $createdField = 'created_at';
    protected $validationRules = [
        'playlist_id' => 'required|integer',
        'video_id' => 'required|integer',
        'position' => 'required|integer'
    ];
    
    public function getPlaylistVideos($playlistId)
    {
        return $this->select('videos.*, playlist_items.id as item_id, playlist_items.position')
                    ->join('videos', 'playlist_items.video_id = videos.id')
                    ->where('playlist_items.playlist_id', $playlistId)
                    ->orderBy('playlist_items.position', 'ASC')
                    ->findAll();
    }
}
```

## Implementation Phases

### Phase 1: Backend Foundation (Week 1)
- [ ] Set up CodeIgniter 4 project structure
- [ ] Configure MariaDB connection
- [ ] Create database migrations
- [ ] Implement Models and Entities
- [ ] Set up CORS filter for API
- [ ] Create base response format helper

### Phase 2: Video API (Week 1-2)
- [ ] Implement VideoController with CRUD operations
- [ ] Add video validation rules
- [ ] Implement search functionality
- [ ] Add YouTube video ID validation
- [ ] Create unit tests for VideoModel

### Phase 3: Playlist API (Week 2-3)
- [ ] Implement PlaylistController
- [ ] Implement PlaylistItemController
- [ ] Add position management logic
- [ ] Implement reorder functionality
- [ ] Create unit tests for Playlist operations

### Phase 4: Frontend Integration (Week 3-4)
- [ ] Create API service layer in Vue.js
- [ ] Implement video library UI
- [ ] Implement playlist management UI
- [ ] Add drag-and-drop for reordering
- [ ] Integrate with existing YouTube player

### Phase 5: Advanced Features (Week 4-5)
- [ ] Add search and filter functionality
- [ ] Implement pagination
- [ ] Add loading states and error handling
- [ ] Optimize database queries
- [ ] Add caching layer (Redis optional)

### Phase 6: Testing & Deployment (Week 5-6)
- [ ] Integration testing
- [ ] Performance testing
- [ ] Security audit
- [ ] Docker deployment setup
- [ ] Documentation

## Configuration Files

### .env (Database Configuration)
```env
CI_ENVIRONMENT = development

database.default.hostname = mariadb
database.default.database = free_youtube
database.default.username = root
database.default.password = secret
database.default.DBDriver = MySQLi
database.default.DBPrefix = 
database.default.port = 3306
```

### docker-compose.yml (Add MariaDB service)
```yaml
services:
  mariadb:
    image: mariadb:10.6
    container_name: free_youtube_db
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: free_youtube
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
    ports:
      - "3306:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - app_network

volumes:
  mariadb_data:

networks:
  app_network:
    driver: bridge
```

## Security Considerations

1. **SQL Injection Prevention**: Use Query Builder/ORM exclusively
2. **CSRF Protection**: Enable CSRF filter for state-changing operations
3. **Input Validation**: Validate all inputs using CI4 validation
4. **XSS Prevention**: Escape all outputs, use Content Security Policy
5. **Rate Limiting**: Implement rate limiting on API endpoints
6. **CORS Configuration**: Properly configure CORS for frontend-backend communication

## Performance Optimization

1. **Database Indexing**: Proper indexes on foreign keys and search fields
2. **Query Optimization**: Use eager loading, avoid N+1 queries
3. **Caching**: Cache frequently accessed playlists and video metadata
4. **Pagination**: Implement cursor-based pagination for large datasets
5. **Connection Pooling**: Configure MariaDB connection pool

## Testing Strategy

### Unit Tests
- Model validation tests
- Business logic tests
- Entity tests

### Integration Tests
- API endpoint tests
- Database transaction tests
- CRUD operation tests

### E2E Tests
- Full user workflows
- Playlist creation and playback
- Video management flows

## Deployment Checklist

- [ ] Set production environment variables
- [ ] Configure production database
- [ ] Enable query caching
- [ ] Set up database backups
- [ ] Configure SSL/HTTPS
- [ ] Set up monitoring and logging
- [ ] Optimize autoloader
- [ ] Disable debug mode
- [ ] Set proper file permissions
- [ ] Configure firewall rules

## Success Metrics

- API response time < 200ms for 95% of requests
- Database query time < 50ms average
- Support 1000+ videos without performance degradation
- Handle 100+ concurrent users
- 99.9% uptime
- Zero SQL injection vulnerabilities

## Documentation Requirements

- API documentation (OpenAPI/Swagger)
- Database schema documentation
- Setup and installation guide
- Developer guide
- User manual

## Future Enhancements

- User authentication and multi-user support
- Cloud storage integration for thumbnails
- Advanced search with Elasticsearch
- Real-time updates with WebSockets
- Mobile app with same API
- Video analytics and statistics
- Social features (sharing, comments)
- Import from YouTube playlists

---

**Document Version**: 1.0
**Last Updated**: 2025-10-27
**Maintained By**: Development Team
