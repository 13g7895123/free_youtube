name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PHP_VERSION: '8.1'

jobs:
  # Check if PR title follows conventions
  pr-title-check:
    name: PR Title Check
    runs-on: ubuntu-latest
    steps:
      - name: Check PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
          requireScope: false

  # Frontend code quality checks
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Check code formatting
        run: npx prettier --check "src/**/*.{js,vue,css}"

      - name: Run tests with coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Comment test coverage
        uses: davelosert/vitest-coverage-report-action@v2
        if: always()
        continue-on-error: true

  # Backend code quality checks
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, mbstring, mysqli, xml, curl
          coverage: none

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Check PHP syntax
        run: find ./app -name "*.php" -exec php -l {} \;

      - name: Check code style (if PHP_CodeSniffer is available)
        run: |
          if [ -f "vendor/bin/phpcs" ]; then
            vendor/bin/phpcs --standard=PSR12 app/
          else
            echo "PHP_CodeSniffer not installed, skipping"
          fi
        continue-on-error: true

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Check for merge conflicts
  conflict-check:
    name: Merge Conflict Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for merge conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) origin/${{ github.base_ref }} HEAD | grep -q '<<<<<<< '; then
            echo "Merge conflicts detected!"
            exit 1
          else
            echo "No merge conflicts detected"
          fi
